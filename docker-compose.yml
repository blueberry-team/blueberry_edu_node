services:
  # Node.js 애플리케이션 서비스
  blueberry-node-app:
    # Dockerfile을 기반으로 이미지 빌드
    build:
      context: .  # 빌드 컨텍스트 (Dockerfile 위치)
      dockerfile: Dockerfile  # 사용할 Dockerfile
    container_name: blueberry-node-app  # 컨테이너 이름 지정
    restart: unless-stopped  # 컨테이너 중단 시 자동 재시작 (명시적 중지 제외)
    ports:
      - "3001:3001"  # 호스트:컨테이너 포트 매핑
    environment:  # 환경 변수 설정
      - PORT=3001  # 애플리케이션 포트
      - MONGODB_URI=mongodb://mongo:27017/userdb  # MongoDB 연결 문자열
      - NODE_ENV=develoment  # 개발 환경 설정
    volumes:
      - ./src:/app/src  # 소스 코드 볼륨 마운트 (개발 환경에서 코드 변경 실시간 반영)
    depends_on:
      - mongo  # MongoDB 컨테이너가 먼저 시작되도록 의존성 설정
    networks:
      - app-network  # 사용할 Docker 네트워크

  # MongoDB 서비스
  mongo:
    image: mongo:7.0  # MongoDB 7.0 버전 이미지 사용
    container_name: mongodb  # 컨테이너 이름
    restart: unless-stopped  # 자동 재시작 설정
    environment:
      - MONGO_DATA_DIR=/data/db  # MongoDB 데이터 디렉토리 설정
    volumes:
      - mongodata:/data/db  # MongoDB 데이터 영속성을 위한 볼륨 마운트
    ports:
      - "27019:27017"  # 호스트:컨테이너 포트 매핑 (외부 접속용)
    networks:
      - app-network  # 사용할 Docker 네트워크

# Docker 네트워크 설정
networks:
  app-network:  # 커스텀 네트워크 정의
    driver: bridge  # bridge 네트워크 드라이버 사용

# Docker 볼륨 설정
volumes:
  mongodata:  # MongoDB 데이터 저장용 볼륨
  # 기본 설정으로 볼륨 생성 (docker managed volume)